!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/fc89f9a9/
>	.\\alghemy\\matter\\collaborators\\space.rb	/^  def >( other )$/;"	f
Affinitester	.\\alghemy\\matter\\collaborators\\evoke\\affinitester.rb	/^module Affinitester$/;"	m
Algdir	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\algdir.rb	/^class Algdir < String$/;"	c
Alghemy	.\\alghemy.rb	/^module Alghemy$/;"	m
Alghemy	.\\alghemy\\version.rb	/^module Alghemy$/;"	m
Algput	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput.rb	/^class Algput$/;"	c
Analysian	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\analysian.rb	/^module Analysian$/;"	m
Append	.\\alghemy\\matter\\transforms\\transmutations\\append.rb	/^class Append < Transmutation$/;"	c
Aspects	.\\alghemy\\matter\\aspects.rb	/^module Aspects$/;"	m
Clasps	.\\alghemy\\matter\\aspects\\clasps.rb	/^module Clasps$/;"	m
Compile	.\\alghemy\\matter\\transforms\\transmutations\\compile.rb	/^class Compile < Transmutation$/;"	c
Deepclone	.\\alghemy\\matter\\serial_recall\\deepclone.rb	/^module Deepclone$/;"	m
Ear	.\\alghemy\\matter\\collaborators\\tomes\\tome\\ear.rb	/^module Ear$/;"	m
Element	.\\alghemy\\affinities\\element.rb	/^class Element < Matter$/;"	c
Elements	.\\alghemy\\affinities\\elements.rb	/^class Elements < Matter$/;"	c
Ents	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\ents.rb	/^class Ents < Array$/;"	c
Evoke	.\\alghemy\\matter\\collaborators\\evoke.rb	/^module Evoke$/;"	m
Eye	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\eye.rb	/^module Eye$/;"	m
Ffell	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffell.rb	/^class Ffell < Rubric$/;"	c
Fflay	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\fflay.rb	/^module Fflay$/;"	m
Ffock	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^class Ffock < Rubric$/;"	c
Fft	.\\alghemy\\matter\\transforms\\transmutations\\fft.rb	/^class Fft < Transmutation$/;"	c
Filename	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^module Filename$/;"	m
Foot	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\foot.rb	/^module Foot$/;"	m
Frames	.\\alghemy\\matter\\transforms\\transmutations\\frames.rb	/^class Frames < Transmutation$/;"	c
Gnumbers	.\\alghemy\\matter\\collaborators\\tomes\\tome\\gnumbers.rb	/^module Gnumbers$/;"	m
Grimoire	.\\alghemy\\matter\\collaborators\\tomes\\grimoire.rb	/^class Grimoire < Tome$/;"	c
Hshprint	.\\alghemy\\matter\\hshprint.rb	/^module Hshprint$/;"	m
Ift	.\\alghemy\\matter\\transforms\\transmutations\\ift.rb	/^class Ift < Transmutation$/;"	c
Image	.\\alghemy\\affinities\\image_classes.rb	/^class Image < Element$/;"	c
ImageConstants	.\\alghemy\\affinities\\constants\\image_constants.rb	/^module ImageConstants$/;"	m
Images	.\\alghemy\\affinities\\image_classes.rb	/^class Images < Elements$/;"	c
Inquire	.\\alghemy\\matter\\collaborators\\inquiries\\inquire.rb	/^module Inquire$/;"	m
Matter	.\\alghemy\\matter.rb	/^class Matter$/;"	c
MatterModules	.\\alghemy\\matter_includes.rb	/^module MatterModules$/;"	m
Memrec	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\memrec.rb	/^module Memrec$/;"	m
Mems	.\\alghemy\\matter\\serial_recall\\mems.rb	/^class Mems < Array$/;"	c
Metamoire	.\\alghemy\\matter\\collaborators\\tomes\\metamoire.rb	/^class Metamoire < Tome$/;"	c
Mrs	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\mrs.rb	/^class Mrs < Rubric$/;"	c
Mutable	.\\alghemy\\matter\\transforms\\mutations.rb	/^module Mutable$/;"	m
Mutate	.\\alghemy\\matter\\transforms\\transmutations\\mutate.rb	/^class Mutate < Transmutation$/;"	c
MuteGet	.\\alghemy\\matter\\transforms\\mute_get.rb	/^module MuteGet$/;"	m
Occultist	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^module Occultist$/;"	m
Probe	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^module Probe$/;"	m
Process	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\process.rb	/^module Process$/;"	m
Recall	.\\alghemy\\matter\\serial_recall.rb	/^module Recall$/;"	m
Rubric	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^class Rubric$/;"	c
Scribe	.\\alghemy\\matter\\collaborators\\scribe.rb	/^module Scribe$/;"	m
Scry	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\scry.rb	/^module Scry$/;"	m
Sijil	.\\alghemy\\matter\\collaborators\\sijil.rb	/^class Sijil < String$/;"	c
Slay	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\slay.rb	/^module Slay$/;"	m
Sock	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^class Sock < Rubric$/;"	c
Sonify	.\\alghemy\\matter\\transforms\\transmutations\\sonify.rb	/^class Sonify < Transmutation$/;"	c
Sound	.\\alghemy\\affinities\\sound_classes.rb	/^class Sound < Element$/;"	c
SoundConstants	.\\alghemy\\affinities\\constants\\sound_constants.rb	/^module SoundConstants$/;"	m
Sounds	.\\alghemy\\affinities\\sound_classes.rb	/^class Sounds < Elements$/;"	c
Space	.\\alghemy\\matter\\collaborators\\space.rb	/^class Space < String$/;"	c
SpaceTrace	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\space_tracer.rb	/^module SpaceTrace$/;"	m
Spell	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^class Spell < Rubric$/;"	c
Split	.\\alghemy\\matter\\transforms\\transmutations\\split.rb	/^class Split < Transmutation$/;"	c
Sublimate	.\\alghemy\\matter\\transforms\\transmutations\\sublimate.rb	/^class Sublimate < Transmutation$/;"	c
Tome	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^class Tome < Array$/;"	c
Transmutation	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^class Transmutation$/;"	c
Transposable	.\\alghemy\\matter\\transforms\\transpositions.rb	/^module Transposable$/;"	m
Video	.\\alghemy\\affinities\\video_classes.rb	/^class Video < Element$/;"	c
VideoConstants	.\\alghemy\\affinities\\constants\\video_constants.rb	/^module VideoConstants$/;"	m
Videos	.\\alghemy\\affinities\\video_classes.rb	/^class Videos < Elements$/;"	c
View	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\view.rb	/^module View$/;"	m
Visualise	.\\alghemy\\matter\\transforms\\transmutations\\visualise.rb	/^class Visualise < Transmutation$/;"	c
[]	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def []( n )$/;"	f	module:Filename
[]	.\\alghemy\\matter\\collaborators\\space.rb	/^  def []( n )$/;"	f
add_mute	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def add_mute$/;"	f	module:Occultist
add_number	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def add_number$/;"	f	module:Occultist
add_pose	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def add_pose$/;"	f	module:Occultist
affinity	.\\alghemy\\matter\\collaborators\\evoke\\affinitester.rb	/^  def affinity$/;"	f	module:Affinitester
amputate	.\\alghemy\\matter\\collaborators\\tomes\\tome\\ear.rb	/^    def amputate$/;"	f	module:Ear
append	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def append$/;"	f	class:Sock
append	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^  def append$/;"	f	class:Spell
aspdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\eye.rb	/^    def aspdex( arr )$/;"	f	module:Eye
aspdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^    def aspdex( arr )$/;"	f	module:Probe
aspdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\scry.rb	/^    def aspdex( arr )$/;"	f	module:Scry
aspects	.\\alghemy\\affinities\\constants\\image_constants.rb	/^  def aspects$/;"	f	module:ImageConstants
aspects	.\\alghemy\\affinities\\constants\\sound_constants.rb	/^  def aspects$/;"	f	module:SoundConstants
aspects	.\\alghemy\\affinities\\constants\\video_constants.rb	/^  def aspects$/;"	f	module:VideoConstants
aspects	.\\alghemy\\matter\\aspects\\clasps.rb	/^  def aspects$/;"	f	module:Clasps
asps	.\\alghemy\\matter\\aspects.rb	/^  def asps( asp = nil )$/;"	f	module:Aspects
aural?	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\foot.rb	/^  def aural?$/;"	f	module:Foot
balance	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\ents.rb	/^  def balance( ent, act = :unshift )$/;"	f	class:Ents
base	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def base$/;"	f	module:Filename
base_num	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def base_num$/;"	f	class:Sijil
behold	.\\alghemy\\matter.rb	/^  def behold$/;"	f	class:Matter
cata	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^    def cata$/;"	f	module:Probe
catdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\analysian.rb	/^  def catdex$/;"	f	module:Analysian
catdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\eye.rb	/^    def catdex$/;"	f	module:Eye
catdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^    def catdex$/;"	f	module:Probe
catdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\scry.rb	/^    def catdex$/;"	f	module:Scry
clonefreeze	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def self.clonefreeze( mems )$/;"	F	class:Mems
clss	.\\alghemy\\matter\\transforms\\mute_get.rb	/^  def clss$/;"	f	module:MuteGet
collect	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def collect( &block )$/;"	f	class:Tome
compile	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def compile$/;"	f	class:Ffock
compose	.\\alghemy\\matter\\collaborators\\evoke.rb	/^    def compose( sijil )$/;"	f	module:Evoke
compose	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def self.compose( sijil )$/;"	F	class:Sijil
data	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\mrs.rb	/^  def data$/;"	f	class:Mrs
deepclone	.\\alghemy\\matter\\serial_recall\\deepclone.rb	/^  def deepclone( obj )$/;"	f	module:Deepclone
def_asps	.\\alghemy\\matter\\aspects\\clasps.rb	/^  def def_asps$/;"	f	module:Clasps
def_rejects	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\memrec.rb	/^  def def_rejects$/;"	f	module:Memrec
defaults	.\\alghemy\\affinities\\constants\\image_constants.rb	/^  def defaults$/;"	f	module:ImageConstants
defaults	.\\alghemy\\affinities\\constants\\sound_constants.rb	/^  def defaults$/;"	f	module:SoundConstants
defaults	.\\alghemy\\affinities\\constants\\video_constants.rb	/^  def defaults$/;"	f	module:VideoConstants
defaults	.\\alghemy\\matter\\transforms\\transmutations\\compile.rb	/^  def defaults$/;"	f	class:Compile
defaults	.\\alghemy\\matter\\transforms\\transmutations\\fft.rb	/^  def defaults$/;"	f	class:Fft
defaults	.\\alghemy\\matter\\transforms\\transmutations\\frames.rb	/^  def defaults$/;"	f	class:Frames
defaults	.\\alghemy\\matter\\transforms\\transmutations\\mutate.rb	/^  def defaults$/;"	f	class:Mutate
defaults	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def defaults$/;"	f	class:Transmutation
defaults	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffell.rb	/^  def self.defaults$/;"	F	class:Ffell
defaults	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def self.defaults$/;"	F	class:Ffock
defaults	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^  def self.defaults$/;"	F	class:Rubric
defaults	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\memrec.rb	/^  def defaults$/;"	f	module:Memrec
defaults	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def self.defaults$/;"	F	class:Sock
defaults	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^  def self.defaults$/;"	F	class:Spell
depth	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^  def depth$/;"	f	class:Spell
dims	.\\alghemy\\matter\\collaborators\\space.rb	/^  def dims$/;"	f
dims	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def dims$/;"	f	class:Tome
dir	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def dir$/;"	f	module:Filename
dir	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput.rb	/^  def dir$/;"	f	class:Algput
dir_ident	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def dir_ident$/;"	f	module:Occultist
discern	.\\alghemy\\matter\\collaborators\\evoke\\affinitester.rb	/^  def discern$/;"	f	module:Affinitester
draw	.\\alghemy\\matter\\collaborators\\space.rb	/^  def self.draw( arr, subspace )$/;"	F
each_group	.\\alghemy\\matter\\collaborators\\tomes\\grimoire.rb	/^  def each_group$/;"	f	class:Grimoire
each_group_sijil	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def each_group_sijil( &block )$/;"	f	class:Tome
each_lmnt	.\\alghemy\\matter\\collaborators\\tomes\\metamoire.rb	/^  def each_lmnt( &block )$/;"	f	class:Metamoire
element	.\\alghemy\\matter\\collaborators\\evoke.rb	/^    def element( sijil, lyst = {} )$/;"	f	module:Evoke
elements	.\\alghemy\\matter\\collaborators\\evoke.rb	/^    def elements( sijil, lyst = {} )$/;"	f	module:Evoke
entcheck	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\ents.rb	/^  def entcheck$/;"	f	class:Ents
ents	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def ents$/;"	f	class:Sock
evoke	.\\alghemy\\matter.rb	/^  def self.evoke( sijil, lyst = {} )$/;"	F	class:Matter
evoke	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def evoke( lyst = {} )$/;"	f	class:Sijil
evoke	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def evoke( tome, rubric )$/;"	f	class:Transmutation
execute	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\process.rb	/^    def execute( process )$/;"	f	module:Process
ext	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def ext$/;"	f	module:Filename
ext_init	.\\alghemy\\matter\\transforms\\transmutations\\visualise.rb	/^  def ext_init$/;"	f	class:Visualise
extend_id	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def extend_id( sijil, ident )$/;"	f	module:Occultist
extendid	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput.rb	/^  def extendid( sijil, ident )$/;"	f	class:Algput
fenestrate	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def fenestrate$/;"	f	module:Filename
ffglob	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def ffglob$/;"	f	class:Sijil
ffroup	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def ffroup( rubriclass, enum )$/;"	f	class:Tome
fft	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffell.rb	/^  def fft$/;"	f	class:Ffell
fin_cata	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def fin_cata$/;"	f	class:Transmutation
find_ids	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def find_ids$/;"	f	module:Occultist
first	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def first$/;"	f	class:Sijil
first_lmnt	.\\alghemy\\matter\\collaborators\\tomes\\metamoire.rb	/^  def first_lmnt$/;"	f	class:Metamoire
flatten	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\process.rb	/^    def flatten( process )$/;"	f	module:Process
fmtdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\eye.rb	/^    def fmtdex$/;"	f	module:Eye
fmtdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^    def fmtdex$/;"	f	module:Probe
fmtdex	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\scry.rb	/^    def fmtdex$/;"	f	module:Scry
format	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\analysian.rb	/^  def format( result )$/;"	f	module:Analysian
format	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def format$/;"	f	class:Ffock
format	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def format$/;"	f	class:Sock
formats	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def formats$/;"	f	class:Ffock
frames	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def frames$/;"	f	class:Ffock
frames_less_than	.\\alghemy\\matter\\transforms\\transmutations\\frames.rb	/^  def frames_less_than( frames )$/;"	f	class:Frames
get_id	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput.rb	/^  def get_id( lyst )$/;"	f	class:Algput
glob_replace	.\\alghemy\\matter\\collaborators\\tomes\\tome\\gnumbers.rb	/^  def glob_replace( sijil, numbers )$/;"	f	module:Gnumbers
globvert	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def globvert$/;"	f	class:Tome
gnums	.\\alghemy\\matter\\collaborators\\tomes\\tome\\gnumbers.rb	/^  def gnums( num_list )$/;"	f	module:Gnumbers
granges	.\\alghemy\\matter\\collaborators\\tomes\\tome\\gnumbers.rb	/^  def granges( sijil, numbers )$/;"	f	module:Gnumbers
hshprint	.\\alghemy\\matter\\hshprint.rb	/^  def hshprint( hsh )$/;"	f	module:Hshprint
identify	.\\alghemy\\matter.rb	/^  def identify$/;"	f	class:Matter
implement	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def implement$/;"	f	class:Transmutation
included	.\\alghemy\\matter\\aspects.rb	/^  def self.included( base )$/;"	F	module:Aspects
inherit	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def inherit( asp, except = :Raw )$/;"	f	class:Mems
inherit	.\\alghemy\\matter\\transforms\\transmutations\\sublimate.rb	/^  def inherit$/;"	f	class:Sublimate
initialize	.\\alghemy\\matter.rb	/^  def initialize( sijil, lyst = {} )$/;"	f	class:Matter
initialize	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def initialize( lmnt, lyst = {} )$/;"	f	class:Transmutation
initialize	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput.rb	/^  def initialize( lyst = {} )$/;"	f	class:Algput
initialize	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^  def initialize( cata )$/;"	f	class:Rubric
input	.\\alghemy\\matter\\collaborators\\inquiries\\inquire.rb	/^  def input$/;"	f	module:Inquire
input	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def input$/;"	f	class:Ffock
input	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^  def input$/;"	f	class:Rubric
intone	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^  def intone( io )$/;"	f	class:Rubric
invoke	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def invoke( algput, rubric )$/;"	f	class:Tome
invoke	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\ents.rb	/^  def self.invoke( ent )$/;"	F	class:Ents
label	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def label$/;"	f	module:Filename
liberate	.\\alghemy\\matter\\collaborators\\tomes\\grimoire.rb	/^  def liberate$/;"	f	class:Grimoire
liberate	.\\alghemy\\matter\\collaborators\\tomes\\metamoire.rb	/^  def liberate$/;"	f	class:Metamoire
limit	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def limit( to_size )$/;"	f	class:Sijil
list	.\\alghemy\\matter.rb	/^  def list$/;"	f	class:Matter
list	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def list$/;"	f	class:Sijil
list	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def list( arr )$/;"	f	class:Transmutation
listen	.\\alghemy\\matter\\collaborators\\tomes\\tome\\ear.rb	/^    def listen( dir = Dir.pwd )$/;"	f	module:Ear
lmnt_ents	.\\alghemy\\matter\\transforms\\transmutations\\visualise.rb	/^  def lmnt_ents$/;"	f	class:Visualise
lmntree	.\\alghemy\\matter\\transforms\\transmutations\\sublimate.rb	/^  def lmntree$/;"	f	class:Sublimate
m_cat	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\memrec.rb	/^  def m_cat$/;"	f	module:Memrec
match_error	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def self.match_error( sijil )$/;"	F	class:Sijil
matching	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\algdir.rb	/^  def matching( ext )$/;"	f	class:Algdir
matter	.\\alghemy\\matter\\collaborators\\evoke.rb	/^    def matter( sijil, lyst = {} )$/;"	f	module:Evoke
mem_index	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def mem_index( except )$/;"	f	class:Mems
mem_init	.\\alghemy\\matter\\serial_recall.rb	/^  def mem_init( mems )$/;"	f	module:Recall
memory	.\\alghemy\\matter\\serial_recall.rb	/^  def memory$/;"	f	module:Recall
memrec	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\memrec.rb	/^  def memrec( mems )$/;"	f	module:Memrec
moniker	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\eye.rb	/^    def moniker$/;"	f	module:Eye
moniker	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^    def moniker$/;"	f	module:Probe
moniker	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\scry.rb	/^    def moniker$/;"	f	module:Scry
moniker	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\fflay.rb	/^  def self.moniker$/;"	F	module:Fflay
moniker	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\slay.rb	/^    def moniker$/;"	f	module:Slay
moniker	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\view.rb	/^    def moniker$/;"	f	module:View
moniker	.\\alghemy\\matter\\collaborators\\inquiries\\inquire.rb	/^  def moniker$/;"	f	module:Inquire
moniker	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffell.rb	/^  def moniker$/;"	f	class:Ffell
moniker	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def moniker$/;"	f	class:Ffock
moniker	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\mrs.rb	/^  def moniker$/;"	f	class:Mrs
moniker	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^  def moniker$/;"	f	class:Rubric
moniker	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def moniker$/;"	f	class:Sock
moniker	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^  def moniker$/;"	f	class:Spell
mutate	.\\alghemy\\matter\\transforms\\mutations.rb	/^  def mutate( lyst = {} )$/;"	f	module:Mutable
mutate	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\mrs.rb	/^  def mutate$/;"	f	class:Mrs
mute	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def mute( id = nil )$/;"	f	module:Occultist
mute_defined?	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\occultist.rb	/^    def mute_defined?( id = nil )$/;"	f	module:Occultist
mute_get	.\\alghemy\\matter\\transforms\\mute_get.rb	/^  def mute_get( sym )$/;"	f	module:MuteGet
num_index	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def num_index$/;"	f	module:Filename
num_index	.\\alghemy\\matter\\collaborators\\tomes\\tome\\gnumbers.rb	/^  def num_index( sijil )$/;"	f	module:Gnumbers
num_list	.\\alghemy\\matter\\collaborators\\tomes\\tome\\gnumbers.rb	/^  def num_list( strings )$/;"	f	module:Gnumbers
num_scan	.\\alghemy\\matter\\collaborators\\tomes\\tome\\gnumbers.rb	/^  def num_scan( sijil )$/;"	f	module:Gnumbers
numbers	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def numbers$/;"	f	class:Tome
open	.\\alghemy\\matter.rb	/^  def open$/;"	f	class:Matter
open	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\algdir.rb	/^  def self.open( dir )$/;"	F	class:Algdir
open_dir	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput.rb	/^  def open_dir$/;"	f	class:Algput
operate	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\mrs.rb	/^  def operate( auto )$/;"	f	class:Mrs
operator	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffell.rb	/^  def operator$/;"	f	class:Ffell
output	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^  def output$/;"	f	class:Rubric
param	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\mrs.rb	/^  def param( automaton )$/;"	f	class:Mrs
parts	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def parts$/;"	f	module:Filename
perceive	.\\alghemy\\matter.rb	/^  def perceive( asp )$/;"	f	class:Matter
perceive	.\\alghemy\\matter\\aspects.rb	/^  def perceive( _asp )$/;"	f	module:Aspects
pix_fmt	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def pix_fmt$/;"	f	class:Ffock
plural?	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def plural?$/;"	f	class:Sijil
plural?	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def plural?$/;"	f	class:Transmutation
plurality	.\\alghemy\\matter\\collaborators\\evoke.rb	/^    def plurality$/;"	f	module:Evoke
prepext	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def prepext$/;"	f	class:Transmutation
probe	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^    def probe$/;"	f	module:Probe
process	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\analysian.rb	/^  def process$/;"	f	module:Analysian
process	.\\alghemy\\matter\\collaborators\\inquiries\\inquire.rb	/^  def process$/;"	f	module:Inquire
process	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric.rb	/^  def process$/;"	f	class:Rubric
put_lyst	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def put_lyst$/;"	f	class:Transmutation
quality	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def quality$/;"	f	class:Ffock
rate	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def rate$/;"	f	class:Ffock
rate	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def rate$/;"	f	class:Sock
raw?	.\\alghemy\\matter\\aspects.rb	/^  def raw?$/;"	f	module:Aspects
recall	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def recall( asp, mem )$/;"	f	class:Mems
redirect	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\view.rb	/^    def redirect$/;"	f	module:View
rejects	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\memrec.rb	/^  def rejects$/;"	f	module:Memrec
relate	.\\alghemy\\matter\\collaborators\\tomes\\tome\\ear.rb	/^    def relate( file )$/;"	f	module:Ear
report	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\analysian.rb	/^  def report( sijil )$/;"	f	module:Analysian
revel	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def revel( memories, matter )$/;"	f	class:Mems
revert	.\\alghemy\\matter\\serial_recall.rb	/^  def revert( levels = mems.size )$/;"	f	module:Recall
revert	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def revert( matter, levels = size )$/;"	f	class:Mems
revertran	.\\alghemy\\matter\\transforms\\transpositions.rb	/^  def revertran( tran )$/;"	f	module:Transposable
rip	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def rip$/;"	f	class:Ffock
rubric	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\foot.rb	/^  def rubric$/;"	f	module:Foot
rubriclass	.\\alghemy\\matter\\transforms\\transmutations\\compile.rb	/^  def rubriclass$/;"	f	class:Compile
rubriclass	.\\alghemy\\matter\\transforms\\transmutations\\fft.rb	/^  def rubriclass$/;"	f	class:Fft
rubriclass	.\\alghemy\\matter\\transforms\\transmutations\\frames.rb	/^  def rubriclass$/;"	f	class:Frames
rubriclass	.\\alghemy\\matter\\transforms\\transmutations\\ift.rb	/^  def rubriclass$/;"	f	class:Ift
rubriclass	.\\alghemy\\matter\\transforms\\transmutations\\mutate.rb	/^  def rubriclass$/;"	f	class:Mutate
rubriclass	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def rubriclass$/;"	f	class:Transmutation
run	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\rubric\\process.rb	/^    def run( process, io = {} )$/;"	f	module:Process
scribe	.\\alghemy\\matter\\collaborators\\tomes\\grimoire.rb	/^  def self.scribe( list, _dims = nil )$/;"	F	class:Grimoire
scribe	.\\alghemy\\matter\\collaborators\\tomes\\metamoire.rb	/^  def self.scribe( list, dims )$/;"	F	class:Metamoire
shrink_check	.\\alghemy\\matter\\transforms\\transmutations\\sublimate.rb	/^  def shrink_check( tree )$/;"	f	class:Sublimate
size	.\\alghemy\\affinities\\elements.rb	/^  def size$/;"	f	class:Elements
size	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def size$/;"	f	class:Ffock
size	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^  def size$/;"	f	class:Spell
sonify	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def sonify$/;"	f	class:Sock
space_trace	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\space_tracer.rb	/^  def space_trace( cata, tree )$/;"	f	module:SpaceTrace
sub_init	.\\alghemy\\affinities\\elements.rb	/^  def sub_init( lyst )$/;"	f	class:Elements
sub_init	.\\alghemy\\matter.rb	/^  def sub_init( _lyst )$/;"	f	class:Matter
sub_init	.\\alghemy\\matter\\transforms\\transmutations\\mutypes\\foot.rb	/^  def sub_init$/;"	f	module:Foot
sub_init	.\\alghemy\\matter\\transforms\\transmutations\\sublimate.rb	/^  def sub_init$/;"	f	class:Sublimate
sub_init	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def sub_init$/;"	f	class:Transmutation
sub_process	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\eye.rb	/^    def sub_process$/;"	f	module:Eye
sub_process	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\probe.rb	/^    def sub_process$/;"	f	module:Probe
sub_process	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\scry.rb	/^    def sub_process$/;"	f	module:Scry
sub_process	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\slay.rb	/^    def sub_process$/;"	f	module:Slay
sub_process	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\view.rb	/^    def sub_process$/;"	f	module:View
sub_process	.\\alghemy\\matter\\collaborators\\inquiries\\inquire.rb	/^  def sub_process$/;"	f	module:Inquire
sub_tome	.\\alghemy\\matter\\transforms\\transmutations\\ift.rb	/^  def sub_tome$/;"	f	class:Ift
subasps	.\\alghemy\\matter\\transforms\\transmutations\\sublimate.rb	/^  def subasps$/;"	f	class:Sublimate
sublimate	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def sublimate$/;"	f	class:Ffock
sublimate	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^  def sublimate$/;"	f	class:Spell
swap_parts	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def swap_parts( lyst = {} )$/;"	f	module:Filename
swap_parts	.\\alghemy\\matter\\collaborators\\tomes\\grimoire.rb	/^  def swap_parts( lyst = {} )$/;"	f	class:Grimoire
test_sijil	.\\alghemy\\matter\\collaborators\\evoke\\affinitester.rb	/^  def test_sijil$/;"	f	module:Affinitester
tests	.\\alghemy\\affinities\\constants\\image_constants.rb	/^  def tests$/;"	f	module:ImageConstants
tests	.\\alghemy\\affinities\\constants\\sound_constants.rb	/^  def tests$/;"	f	module:SoundConstants
tests	.\\alghemy\\affinities\\constants\\video_constants.rb	/^  def tests$/;"	f	module:VideoConstants
this	.\\alghemy\\matter\\collaborators\\inquiries\\analysians\\analysian.rb	/^  def this( sijil, asp = nil )$/;"	f	module:Analysian
this	.\\alghemy\\matter\\collaborators\\inquiries\\inquire.rb	/^  def this( sijil )$/;"	f	module:Inquire
to_s	.\\alghemy\\matter\\collaborators\\tomes\\tome.rb	/^  def to_s$/;"	f	class:Tome
tome_class	.\\alghemy\\matter\\collaborators\\scribe.rb	/^  def self.tome_class( dims )$/;"	F	module:Scribe
tomes	.\\alghemy\\matter\\collaborators\\scribe.rb	/^  def self.tomes$/;"	F	module:Scribe
tools	.\\alghemy\\affinities\\constants\\image_constants.rb	/^  def tools$/;"	f	module:ImageConstants
tools	.\\alghemy\\affinities\\constants\\sound_constants.rb	/^  def tools$/;"	f	module:SoundConstants
tools	.\\alghemy\\affinities\\constants\\video_constants.rb	/^  def tools$/;"	f	module:VideoConstants
tools	.\\alghemy\\matter.rb	/^  def self.tools$/;"	F	class:Matter
total	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput\\algdir.rb	/^  def total$/;"	f	class:Algdir
trace	.\\alghemy\\matter\\collaborators\\space.rb	/^  def self.trace( space, subspace = nil )$/;"	F	class:Space
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\append.rb	/^  def tran_init$/;"	f	class:Append
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\compile.rb	/^  def tran_init$/;"	f	class:Compile
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\fft.rb	/^  def tran_init$/;"	f	class:Fft
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\frames.rb	/^  def tran_init$/;"	f	class:Frames
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\ift.rb	/^  def tran_init$/;"	f	class:Ift
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\mutate.rb	/^  def tran_init$/;"	f	class:Mutate
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\sonify.rb	/^  def tran_init$/;"	f	class:Sonify
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\split.rb	/^  def tran_init$/;"	f	class:Split
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\transmutation.rb	/^  def tran_init$/;"	f	class:Transmutation
tran_init	.\\alghemy\\matter\\transforms\\transmutations\\visualise.rb	/^  def tran_init$/;"	f	class:Visualise
transcribe	.\\alghemy\\matter\\collaborators\\scribe.rb	/^  def self.transcribe( list, dims = nil )$/;"	F	module:Scribe
transpose	.\\alghemy\\matter\\collaborators\\tomes\\metamoire.rb	/^  def transpose$/;"	f	class:Metamoire
transpose	.\\alghemy\\matter\\transforms\\transpositions.rb	/^  def transpose( lyst = {} )$/;"	f	module:Transposable
tune_parts	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\algput.rb	/^  def tune_parts( lyst )$/;"	f	class:Algput
tweak_space	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def tweak_space( matter )$/;"	f	class:Mems
type	.\\alghemy\\matter\\serial_recall\\mems.rb	/^  def type( mem )$/;"	f	class:Mems
type	.\\alghemy\\matter\\transforms\\transmutations\\sublimate.rb	/^  def type$/;"	f	class:Sublimate
type	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def type( var = nil )$/;"	f	class:Ffock
type	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def type( var = nil )$/;"	f	class:Sock
unglob	.\\alghemy\\matter\\collaborators\\sijil.rb	/^  def unglob$/;"	f	class:Sijil
unique	.\\alghemy\\matter\\collaborators\\sijil\\filename.rb	/^  def unique$/;"	f	module:Filename
unknown	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def unknown( ext = cata[:ext] )$/;"	f	class:Sock
visualise	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\sock.rb	/^  def visualise$/;"	f	class:Sock
vora	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\ffock.rb	/^  def vora$/;"	f	class:Ffock
vorh	.\\alghemy\\matter\\transforms\\transmutations\\transmutation\\rubrics\\spell.rb	/^  def vorh$/;"	f	class:Spell
wave_type	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\slay.rb	/^    def wave_type$/;"	f	module:Slay
windows_process?	.\\alghemy\\matter\\collaborators\\inquiries\\beholders\\view.rb	/^    def windows_process?$/;"	f	module:View
windows_process?	.\\alghemy\\matter\\collaborators\\inquiries\\inquire.rb	/^  def windows_process?$/;"	f	module:Inquire
wrong	.\\alghemy\\matter\\collaborators\\evoke\\affinitester.rb	/^  def wrong( affinity )$/;"	f	module:Affinitester
